
class Solution {
    public int slidingPuzzle(int[][] board) {
        // Flatten the 2x3 board into a 1D array
        StringBuilder start = new StringBuilder();
        for (int[] row : board) {
            for (int num : row) {
                start.append(num);
            }
        }
        
        // Target state
        String target = "123450";
        
        // Mapping of each index to its possible moves (0-based index of the flattened array)
        int[][] moves = {
            {1, 3},       // Index 0 can move to indices 1 and 3
            {0, 2, 4},    // Index 1 can move to indices 0, 2, and 4
            {1, 5},       // Index 2 can move to indices 1 and 5
            {0, 4},       // Index 3 can move to indices 0 and 4
            {1, 3, 5},    // Index 4 can move to indices 1, 3, and 5
            {2, 4}        // Index 5 can move to indices 2 and 4
        };
        
        // BFS setup
        Queue<String> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        queue.offer(start.toString());
        visited.add(start.toString());
        
        int steps = 0;
        
        // BFS loop
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String current = queue.poll();
                
                // Check if we've reached the target
                if (current.equals(target)) {
                    return steps;
                }
                
                // Find the index of '0'
                int zeroIndex = current.indexOf('0');
                
                // Generate neighbors
                for (int move : moves[zeroIndex]) {
                    StringBuilder neighbor = new StringBuilder(current);
                    // Swap '0' with the target position
                    neighbor.setCharAt(zeroIndex, neighbor.charAt(move));
                    neighbor.setCharAt(move, '0');
                    
                    String neighborStr = neighbor.toString();
                    if (!visited.contains(neighborStr)) {
                        queue.offer(neighborStr);
                        visited.add(neighborStr);
                    }
                }
            }
            steps++;
        }
        
        // If the queue is empty and we never reached the target
        return -1;
    }
}
